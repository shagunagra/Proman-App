{
  "swagger": "2.0",
  "info": {
    "title": "User Registration API",
    "version": "1.0.0",
    "description": "## API of User Signup Service\n\nThis specification describes the endpoints, request/response model of the User Signup API. This API provides REST resources to register users in Proman application.\n\nThe resources should only be used over HTTPS (SSL) and can be accessed via the following base URL:\n\n```  https://proman.io/api/v1/\n```\n\n## API usage guidelines\n\nThis section describes general rules and guidelines for using REST based services offered by Proman.\n  * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.\n  * Proman reserves the right to add new parameters without further notice (in request and response).\n  * Proman reserves the right to add new error codes without further notice. Proman will thereby stick to the HTTP STATUS CODES as defined by W3C.\n  * Proman reserves the right to enhance enumerations by new values.\n  * Proman reserves the right to increase the \"maxItem\" settings of arrays without further notice.\n  \nEach consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))\n\n## Business definitions\nA user who is trying to register should provide the required inputs including email address in order to be registered successfully in Proman application. After the signup, user will remain in REGISTERED status and cannot access Proman application. Once approved by an administrator, user will turn to ACTIVE status and can start accessing Proman application.\n\n### Note: Proman application supports HTTPS only scheme. All requests are sent in a secured and encrypted manner and hence the password is never sent in a text/plain format.\n### Password Policy:\n  * Minimum of 8 character length\n\n  * Should contain alphabets with at least one special character and one number\n\n  * Allowed special characters are # $ @ _ - !\n\n## Release Notes\n### 1.0.0\n* Initial version\n"
  },
  "host": "proman.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api/v1/signup",
  "tags": [
    {
      "name": "API#002 Signup",
      "description": "All operations marked with 'API#002 Signup' are relevant to user signup use case"
    }
  ],
  "paths": {
    "/signup": {
      "x-swagger-router-controller": "api",
      "post": {
        "tags": [
          "API#002 Signup"
        ],
        "operationId": "signupUser",
        "summary": "Signup User",
        "description": "Each user who needs access to Proman application should signup using their valid email address and set a password for an authorized access.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ClientId"
          },
          {
            "in": "body",
            "name": "SignupUserRequest",
            "description": "Request containing user signup information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignupUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED - User has been signuped successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "location": {
                "type": "string",
                "description": "Location of the new resource which was created by this request"
              }
            },
            "schema": {
              "$ref": "#/definitions/SignupUserResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "ClientId": {
      "name": "client-id",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory request header about the caller of this API. Only an authorized clients are allowed to this API."
    }
  },
  "definitions": {
    "SignupUserRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First name of the new user"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the new user"
        },
        "email_address": {
          "type": "string",
          "description": "Email address of the new user"
        },
        "password": {
          "type": "string",
          "description": "Password of the new user",
          "format": "password",
          "x-obfuscated": true
        },
        "mobile_number": {
          "type": "string",
          "description": "Mobile number of the new user"
        }
      },
      "required": [
        "first_name",
        "last_name",
        "email_address",
        "password",
        "mobile_number"
      ],
      "example": {
        "first_name": "Proman",
        "last_name": "Administrator",
        "email_address": "proman.admin@proman.io",
        "password": "Pr0m@n@dm1nu$er",
        "mobile_number": "+91 1234567890"
      }
    },
    "SignupUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User identifier in a standard UUID format generated by API backend"
        },
        "status": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "status"
      ],
      "example": {
        "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
        "status": "REGISTERED"
      }
    },
    "UserStatusType": {
      "type": "string",
      "enum": [
        "REGISTERED",
        "ACTIVE",
        "INACTIVE",
        "LOCKED"
      ],
      "description": "Status of the User"
    }
  }
}